resourcename = "kitsunegay_fastly_vcl"

# terraform {
#   experiments = [module_variable_optional_attrs]
# }

backends = [
    {
        "name" = "Tail1"
        "address" = "www.kitsune.gay.s3-website-us-west-1.amazonaws.com"
        "shield" = "pao-ca-us"
        "weight" = "100"
    },
    {
        "name" = "Tail2"
        "address" = "www.kitsune.gay1.s3-website-us-west-1.amazonaws.com"
        "shield" = "pao-ca-us"
        "weight" = "80"
    },
    {
        "name" = "Tail3"
        "address" = "www.kitsune.gay2.s3-website-us-west-1.amazonaws.com"
        "shield" = "pao-ca-us"
        "weight" = "80"
    }
    
]

conditions = [
    {
        "name" = "Generated by synthetic response for 404 page"
        "statement" = "beresp.status == 404"
        "type" = "CACHE"
        "priority" = "0"


    },
    {
        "name" = "Generated by synthetic response for 503 page"
        "statement" = "beresp.status == 503"
        "type" = "CACHE"
        "priority" = "0"
    },
    {
        "name" = "If /"
        "statement" = "req.url.path ~ \"^/$\""
        "type" = "CACHE"
        "priority" = "0"

    },
    {
        "name" = "Purge"
        "statement" = "req.request == \"FASTLYPURGE\""
        "type" = "REQUEST"
        "priority" = 10
        
    },
    {
        "name" = "Sneps"
        "statement" = "req.http.snep ~ \"true\""
        "type" = "RESPONSE"
        "priority" = 10
    },
    {
        "name": "snep",
        "statement": "if req.http.snep",
        "type": "REQUEST"
        "priority": 10,
    }
]

headers = [
    {
        "action" = "set",
        "destination" = "http.Fastly-Purge-Requires-Auth",
        "name" = "Fastly Purge",
        "type" = "response",
        "request_condition" = "Purge",
        "source" = "\"1\""
        
    },

    {
        "action" = "set",
        "destination" = "http.Surrogate-Key",
        "name" = "Surrogate Keys",
        "type" = "cache",
        "request_condition" = "Purge",
        "source" = "regsub(req.url, \"^/(.*)\\.(.*)$\", \"\\1\")",
    },

    {
        "action" = "set",
        "destination" = "http.Strict-Transport-Security",
        "name" = "Generated by force TLS and enable HSTS",
        "type" = "response"
        "priority" = "100",
        "request_condition" = "Purge",
        "source" = "\"max-age=300\"",
    },

    {
        "action" = "set",
        "destination" = "http.homph",
        "name" = "Snow Leopards",
        "type" = "response"
        "ignore_if_set" = true
        "request_condition" = "Purge",
        "response_condition" = "Sneps",
        "source" = "\"mow\"",
        
    }
  
]


gzip_contenttypes = [
    "application/javascript",
    "application/json",
    "application/vnd.ms-fontobject",
    "application/x-font-opentype",
    "application/x-font-truetype",
    "application/x-font-ttf",
    "application/x-javascript",
    "application/xml",
    "font/eot",
    "font/opentype",
    "font/otf",
    "image/svg+xml",
    "image/vnd.microsoft.icon",
    "text/css",
    "text/html",
    "text/javascript",
    "text/plain",
    "text/xml"
]
gzip_extensions = [
      "css",
      "eot",
      "html",
      "ico",
      "js",
      "json",
      "otf",
      "svg",
      "ttf"
]


healthchecks = [
    {
        host = "http://www.kitsune.gay1.s3-website-us-west-1.amazonaws.com/"
        name = "Kitsune.Gay 1 Healthcheck"
        path = "/www.kitsune.gay1-healthcheck.txt"
    },
    {
        host = "www.kitsune.gay"
        name = "S3Healthcheck"
        path = "/www.kitsune.gay-healthcheck.txt"

    },
    {
        host = "www.kitsune.gay2.s3-website-us-west-1.amazonaws.com"
        name = "Kitsune.Gay2"
        path = "/www.kitsune.gay2-healthcheck.txt"

    }
]

response_objects = [
    {
        cache_condition = "Generated by synthetic response for 404 page"
        content = "\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003ctitle\u003e404\u003c/title\u003e\n    \u003cstyle\u003e\n      body {\n        display: flex;\n        justify-content: center;\n        align-items: center;  \n        flex-wrap: wrap;\n        flex-direction: column;\n      }\n\n      p {\n        font-size: 5rem;\n        white-space: nowrap;\n        \n      }\n      img {\n \n        \n      }\n\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cimg src=\"https://upload.wikimedia.org/wikipedia/en/c/c0/Red-fox-range-A.PNG\" alt=\"A picture of the territories of a fox, it includes a lot of Canada and the eastern and western US, all of europe, almost all of Asia excluding southern India and southern Vietnam as well as most of Laos and Cambodia, foxes stretch along the Nile. the very tips of North Africa, and some of the Middle East, but also southern Australia as well. They do not occupy a lot of Oceania\"\u003e\u003c/img\u003e\n    \u003cp\u003e\n      404: Our Network Foxes Couldn't Find It :( \n    \u003c/p\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n"
        content_type = "text/html"
        name = "Generated by synthetic response for 404 page"
        request_condition = ""
        response = "Not Found"
        status = "404"
    },
    {
        cache_condition = "Generated by synthetic response for 503 page"
        content = "\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003ctitle\u003e50wu03\u003c/title\u003e\n      \u003cstyle\u003e\n      body {\n        display: flex;\n        justify-content: center;\n        align-items: center;  \n        flex-wrap: wrap;\n        flex-direction: column;\n      }\n\n      p {\n        font-size: 5rem;\n        white-space: nowrap;\n        \n      }\n      img {\n \n        \n      }\n\n    \u003c/style\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    uwuno! a 50wu03 err0wu0\n  \u003c/body\u003e\n\u003c/html\u003e"
        content_type = "text/html"
        name = "Generated by synthetic response for 503 page"
        request_condition = ""
        response = "Service Unavailable"
        status = "503"
    }
]

snippets = [
    {
        content = "if (obj.status == 618 \u0026\u0026 obj.response == \"redirect\")\r\n{\r\n  set obj.status = 302; \r\n  set obj.http.Location = table.lookup(redirects, req.url.path);\r\n  return (deliver);\r\n}"
        name = "redirect table redirect"
        priority = 100 
        type = "error"
    },
    {
        content = "if (req.request == \"FASTLYPURGE\") {\r\n    set req.http.Fastly-Purge-Requires-Auth = \"1\";\r\n}"
        name = "Purge require Auth"
        priority = "100"
        type = "recv"
    },
    {
        content = "if (req.url.ext ~ \"(?i)^(gif|png|jpe?g|webp)$\"){\n  set req.http.x-fastly-imageopto-api = \"fastly\";\n}"
        name = "Image Opto"
        priority = "100"
        type = "recv"
    },
    {
        content = "if (table.contains(redirects, req.url.path ))\r\n{\r\n  error 618 \"redirect\";\r\n}"
        name = "redirects table check"
        priority = 100
        type = "recv"
    },
    {
        content = "set req.url = req.url.path;"
        name = "Cache Busting Prevention"
        priority = 1
        type = "hash"
    },
]